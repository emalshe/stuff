if not game:IsLoaded() then game.Loaded:Wait() end 
repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
local cloneref = cloneref or function(...) return ... end

if not getgenv().SpoofedWalkspeed then
    local gmt = getrawmetatable(game)
    setreadonly(gmt,false)
    local oldindex = gmt.__index

    gmt.__index = newcclosure(function(self,b)
        if b == "WalkSpeed" then
            return 16
        end
        return oldindex(self,b)
    end)
end

getgenv().SpoofedWalkspeed = true

local lp = game.Players.LocalPlayer and cloneref(game:GetService("Players")).LocalPlayer
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local BufferRemote = ReplicatedStorage:WaitForChild("ByteNetReliable", math.huge)
local Packets = require(ReplicatedStorage.Modules.Packets)
local ToolModule = require(lp.PlayerScripts.src.Game.Tool)
local ItemsModule = require(ReplicatedStorage.Modules.ItemData)
local CoreGui = cloneref(game:GetService("CoreGui"))
local lpId = game.Players:GetUserIdFromNameAsync(lp.Name)

local itemsTable = {}
local whitelistedItems = {"object", "food"}

for i, v in pairs(ItemsModule) do
    if typeof(v) == "table" then
        for ii,vv in pairs(v) do
            if ii == "itemType" and table.find(whitelistedItems, vv) then
                table.insert(itemsTable, i)
            end
        end
    end
end

table.sort(itemsTable)

local foodTable = {}

for i, v in pairs(ItemsModule) do
    if typeof(v) == "table" then
        for ii,vv in pairs(v) do
            if ii == "itemType" and vv == "food" then
                table.insert(foodTable, i)
            end
        end
    end
end

table.sort(foodTable)

for i,v in pairs(getconnections(lp.Idled)) do v:Disable() end

getgenv().yeKterceS1 = "AmI"
getgenv().yeKterceS2 = "orAmINot?"

local Fluent = loadstring(game:HttpGet("https://pastebin.com/raw/wWQMS5eY"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Booga Booga [Reborn] COMBAT - Lenut Hub",
    SubTitle = "by ja5on7190",
    TabWidth = 160,
    Size = UDim2.fromOffset(475, 320),
    Acrylic = false,
    Theme = "Obsidian Glow",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Mobile = Window:AddTab({ Title = "Mobile", Icon = "rbxassetid://10734921524" }),
    Main = Window:AddTab({ Title = "Main", Icon = "rbxassetid://10723407389" })
}

Window:SelectTab(1)

local buttonCreated = false

Tabs.Mobile:AddButton({
    Title = "Mobile Helper",
    Callback = function()    
        if not buttonCreated then
            local gui = Instance.new("ScreenGui")
            gui.Parent = CoreGui
            local button = Instance.new("TextButton")
            button.Text = "Hide/Show"
            button.BackgroundColor3 = Color3.new(1, 1, 1)
            button.Size = UDim2.new(0, 75, 0, 75)
            button.Position = UDim2.new(0.5, -button.Size.X.Offset / 2, 0, -50)
            button.Parent = gui

            local uicorner = Instance.new("UICorner")
            uicorner.CornerRadius = UDim.new(0, 100)
            uicorner.Parent = button

            button.TextSize = 10
            button.TextColor3 = Color3.new(0, 0, 0)

            local function ToggleVisibility()
                for _, v in pairs(CoreGui:GetDescendants()) do
                    if v:IsA("Frame") and v.Size.X.Offset == 475 and v.Size.Y.Offset == 320 and v.Parent:IsA("ScreenGui") then
                        v.Visible = not v.Visible
                    end
                end
            end
        
            if UserInputService.TouchEnabled then
                button.Activated:Connect(ToggleVisibility)
            else
                button.MouseButton1Click:Connect(ToggleVisibility)
            end
        
            buttonCreated = true
        end
    end
})

local attackPlayerToggle = Tabs.Main:AddToggle("Attack Player Toggle", 
{
    Title = "Killaura", 
    Default = false,
    Callback = function(v)
        getgenv().killAura = v
        if v then
            spawn(HitPlayer)
        end
    end 
})

local heal = Tabs.Main:AddSection("Healing")

local foodMultiDropdown = Tabs.Main:AddDropdown("Food MultiDropdown", {
    Title = "Food",
    Values = foodTable,
    Multi = true,
    Default = {},
})

local selectedHealingFood = {}

foodMultiDropdown:OnChanged(function(foods)
    selectedHealingFood = {}
    for food, _ in pairs(foods) do
        table.insert(selectedHealingFood, food)
    end
end)

local selectedHealth

local hpSlider = Tabs.Main:AddSlider("HP Slider", 
{
    Title = "Health",
    Default = 50,
    Min = 0,
    Max = 99,
    Rounding = 1,
    Callback = function(health)
        selectedHealth = tonumber(health)
    end
})

local healToggle = Tabs.Main:AddToggle("Heal Toggle", 
{
    Title = "Auto Heal", 
    Default = false,
    Callback = function(v)
        getgenv().autoHeal = v
        if v then
            spawn(eatForHP)
        end
    end 
})

local hunger = Tabs.Main:AddSection("Hunger")

local foodHungerMultiDropdown = Tabs.Main:AddDropdown("Food Hunger MultiDropdown", {
    Title = "Food",
    Values = foodTable,
    Multi = true,
    Default = {},
})

local selectedFoods = {}

foodHungerMultiDropdown:OnChanged(function(foods)
    selectedFoods = {}
    for food, _ in pairs(foods) do
        table.insert(selectedFoods, food)
    end
end)

local selectedHunger

local hungerSlider = Tabs.Main:AddSlider("Hunger Slider", 
{
    Title = "Hunger %",
    Default = 50,
    Min = 1,
    Max = 99,
    Rounding = 1,
    Callback = function(hunger)
        selectedHunger = tonumber(hunger)
    end
})

local hungerToggle = Tabs.Main:AddToggle("Hunger Toggle", 
{
    Title = "Auto Hunger", 
    Default = false,
    Callback = function(v)
        getgenv().autoEat = v
        if v then
            spawn(eatForHunger)
        end
    end 
})

local void = Tabs.Main:AddSection("Void Shield")

local selectedHP

local healthSlider = Tabs.Main:AddSlider("Health Slider", 
{
    Title = "Health",
    Default = 50,
    Min = 1,
    Max = 99,
    Rounding = 1,
    Callback = function(hp)
        selectedHP = tonumber(hp) 
    end
})

local voidShieldToggle = Tabs.Main:AddToggle("Void Shield Toggle", 
{
    Title = "Auto Void Shield", 
    Default = false,
    Callback = function(v)
        getgenv().autoVoidShield = v
        if v then
            spawn(voidShield)
        end
    end 
})

local antiLag = Tabs.Main:AddSection("Anti-Lag")

local itemsMultiDropdown = Tabs.Main:AddDropdown("Items MultiDropdown", {
    Title = "Items",
    Values = itemsTable,
    Multi = true,
    Default = {},
})

local selectedItems = {}

itemsMultiDropdown:OnChanged(function(items)
    selectedItems = {}
    for item, _ in pairs(items) do
        table.insert(selectedItems, item)
    end
end)

local antiLagToggle = Tabs.Main:AddToggle("Anti-Lag Toggle", 
{
    Title = "Anti-Lag", 
    Default = false,
    Callback = function(v)
        getgenv().antiLag = v
        if v then
            spawn(delItems)
        end
    end 
})

local speed = Tabs.Main:AddSection("Walkspeed")

getgenv().selectedSpeed = 16

local walkSpeedSlider = Tabs.Main:AddSlider("Walkspeed Slider", 
{
    Title = "Walkspeed",
    Default = 16,
    Min = 16,
    Max = 22,
    Rounding = 1,
    Callback = function(speed)
        getgenv().selectedSpeed = tonumber(speed)
        if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character.Humanoid.WalkSpeed = getgenv().selectedSpeed
        end
    end
})

--Functions

local HitTarget = loadstring(game:HttpGet("https://raw.githubusercontent.com/emalshe/stuff/refs/heads/main/buffer",true))()

local gameUtil = require(ReplicatedStorage.Modules.GameUtil)

local function getClosestPlayer()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Players:GetChildren()) do
            local targetId = game.Players:GetUserIdFromNameAsync(v.Name)
            if v and not gameUtil.AreAllies(lpId, targetId) and lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= lp.Name and v:FindFirstChild("HumanoidRootPart") then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance <= 10 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

function HitPlayer()   
    while getgenv().killAura do
        local target = getClosestPlayer()
        if target and target:FindFirstChildOfClass("Humanoid").Health > 0 then
            local EId = target:GetAttribute("EntityID")
            HitTarget(EId)
            ToolModule.SwingTool()
        else
            target = nil
        end
        task.wait()
    end
end

local autoHealConnection

function eatForHP()
    if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = lp.Character:WaitForChild("Humanoid")

        if autoHealConnection then
            autoHealConnection:Disconnect()
            autoHealConnection = nil
        end

        autoHealConnection = humanoid.HealthChanged:Connect(function(newHealth)
            if not getgenv().autoHeal then
                if autoHealConnection then
                    autoHealConnection:Disconnect()
                    autoHealConnection = nil
                end
                return
            end
            local healthNeeded = selectedHealth - newHealth
            if newHealth > 0 and newHealth < selectedHealth then
                local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
                local healingInProgress = false

                for i, v in pairs(PlayerData) do
                    if typeof(v) == "table" and i == "inventory" then
                        for i2, v2 in pairs(v) do
                            if table.find(selectedHealingFood, v2.name) then
                                local nourishment = ItemsModule[v2.name].nourishment.health
                                if nourishment then
                                    local itemsNeeded = math.ceil(healthNeeded / nourishment)

                                    if not healingInProgress then
                                        task.spawn(function()
                                            for _ = 1, itemsNeeded do
                                                Packets.UseBagItem.send(i2)
                                            end
                                        end)
                                        healingInProgress = true
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
    end
end

function eatForHunger()
    while getgenv().autoEat do
        local StatsModule = require(lp.PlayerScripts.src.Game.StatHandler).ReformStats()
        if tonumber(StatsModule.food) <= selectedHunger then
            local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data

            for i, v in pairs(PlayerData) do
                if typeof(v) == "table" and i == "inventory" then
                    for i2, v2 in pairs(v) do
                        if table.find(selectedFoods, v2.name) then
                            Packets.UseBagItem.send(i2)
                        end
                    end
                end
            end
        end
        task.wait(1)
    end
end

function voidShield()
    while getgenv().autoVoidShield do
        if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            if lp.Character.Humanoid.Health <= selectedHP then
                Packets.VoodooSpell.send(lp.Character.PrimaryPart.Position)
            end
        end
        task.wait()
    end
end

local antiLagConnection

function delItems()
    for i,v in pairs(workspace.Items:GetChildren()) do
        if table.find(selectedItems, v.Name) then
            v:Destroy()
        end
    end
    if antiLagConnection then
        antiLagConnection:Disconnect()
        antiLagConnection = nil
    end
    antiLagConnection = workspace.Items.ChildAdded:Connect(function(child)
        if not getgenv().antiLag then
            if antiLagConnection then
                antiLagConnection:Disconnect()
                antiLagConnection = nil
            end
            return
        end
        if table.find(selectedItems, child.Name) then
            child:Destroy()
        end
    end)
end

if not getgenv().InitWalkspeed then
    local function walkSpeedChange()
        if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character.Humanoid.WalkSpeed = getgenv().selectedSpeed
        end
    end
    
    task.spawn(function()
        while true do
            if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
                local humanoid = lp.Character:FindFirstChildOfClass("Humanoid")
    
                for _, connection in pairs(getconnections(humanoid:GetPropertyChangedSignal("WalkSpeed"))) do
                    connection:Disconnect()
                end
    
                humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(walkSpeedChange)
            end
            task.wait(0.5)
        end
    end)
    getgenv().InitWalkspeed = true
end
