local scriptStatus = loadstring(game:HttpGet("https://pastebin.com/raw/tETBwUZF"))()
if not scriptStatus then return end

local list = workspace.Worlds["The Overworld"].Leaderboards.Competitive.Display.Leaderboard.List
if getgenv().clanName == "" or getgenv().clanName == nil or getgenv().clanName == " " then print("Enter a clan name!") return end
local trackedClan = getgenv().clanName

local firstRun = true

if getgenv().webhookUrl == "" or getgenv().webhookUrl == nil or getgenv().webhookUrl == " " then print("Enter a webhook url!") return end
local url = getgenv().webhookUrl

local function SendWebhook(url, title, fields, color)
    local http = game:GetService("HttpService")
    local data = {
        ["embeds"] = {{
            ["title"] = title,
            ["color"] = color or 0x00FFFF,
            ["fields"] = fields,
            ["footer"] = {
                ["text"] = "Leaderboard Tracker | Updated every 10 minutes | Made by Gato and Ja5on | Lunor Hub | discord.gg/lnr"
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    local headers = {["Content-Type"] = "application/json"}
    local body = http:JSONEncode(data)
    request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
end

local lastScore = nil
local lastMemberScores = {}

local function findClanInfo()
    local clans = {}

    for _, frame in ipairs(list:GetChildren()) do
        if frame:IsA("Frame") and frame.Name:match("^Entry%d+$") then
            local spot = tonumber(frame.Name:match("%d+"))
            local clanNameLabel = frame:FindFirstChild("ClanName")
            local numberLabel = frame:FindFirstChild("Number")

            if clanNameLabel and numberLabel and clanNameLabel:IsA("TextLabel") and numberLabel:IsA("TextLabel") then
                table.insert(clans, {
                    spot = spot,
                    name = clanNameLabel.Text,
                    score = tonumber((numberLabel.Text:gsub(",", ""))) or 0
                })
            end
        end
    end

    table.sort(clans, function(a, b) return a.spot < b.spot end)
    return clans
end

local function getAllMemberPoints()
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local gui = localPlayer:WaitForChild("PlayerGui")
    local screenGui = gui:WaitForChild("ScreenGui")
    local hudRight = screenGui:WaitForChild("HUD"):WaitForChild("Right")
    local compBut = hudRight:WaitForChild("Competitive"):WaitForChild("Button")
    
    local compTab = screenGui:WaitForChild("Competitive")
    local compTeam = compTab:WaitForChild("Frame"):WaitForChild("Sidebar"):WaitForChild("Buttons"):WaitForChild("Team"):WaitForChild("Button")
    local membersFrame = compTab:WaitForChild("Frame"):WaitForChild("Content"):WaitForChild("Team"):WaitForChild("Content"):WaitForChild("Members")

    if not compTab.Visible then
        firesignal(compBut.Activated)
    end

    firesignal(compTeam.Activated)

    local resultStr = ""
    local currentScores = {}
    local rawScore = 0

    for _, member in pairs(membersFrame:GetChildren()) do
        if member.Name == "Template" and member:IsA("Frame") then
            local mainFrame = member:FindFirstChild("Main")
            if mainFrame then
                local infoLabel = mainFrame:FindFirstChild("Info")
                local scoreLabel = mainFrame:FindFirstChild("Score")
                if infoLabel and scoreLabel and not infoLabel.Text:find("sircfenner") and not scoreLabel.Text:find("999,999,999") then
                    local name = infoLabel.Text
                    local score = tonumber((scoreLabel.Text:gsub(",", ""))) or 0
                    resultStr = resultStr .. name .. ": " .. score .. "\n"
                    currentScores[name] = score
                    rawScore = rawScore + score
                end
            end
        end
    end

    if compTab.Visible then
        firesignal(compBut.Activated)
    end

    return resultStr:sub(1, -2), currentScores, rawScore
end

local function trackClan()
    local clans = findClanInfo()
    local muffinData = nil
    local clanAbove = nil

    for i, clan in ipairs(clans) do
        if clan.name == trackedClan then
            muffinData = clan
            clanAbove = clans[i - 1]
            break
        end
    end

    if muffinData then
        local success, memberPointsStr, currentScores, totalPoints = pcall(function()
            local pointsStr, scores, total = getAllMemberPoints()
            return pointsStr, scores, total
        end)

        local fields = {
            {
                name = "üè∑Ô∏è Clan Name",
                value = muffinData.name,
                inline = true
            },
            {
                name = "üìä Rank",
                value = "#" .. muffinData.spot,
                inline = true
            },
            {
                name = "üíØ Score",
                value = tostring(muffinData.score),
                inline = true
            }
        }

        local const = require(game:GetService("ReplicatedStorage").Shared.Constants)
        local plrData = require(game:GetService("ReplicatedStorage").Client.Framework.Services.LocalData).Get()
        local memberCount = #plrData.Competitive.Clan.Members
        local maxMembers = const.Clan.MaxMembers
        local clanStatus = (memberCount == maxMembers) and "FULL" or "Open"

        table.insert(fields, {
            name = "üë• Members",
            value = memberCount .. "/" .. maxMembers .. " (" .. clanStatus .. ")",
            inline = true
        })

        if clanAbove then
            local scoreTillNext = clanAbove.score - muffinData.score

            table.insert(fields, {
                name = "üìà Score Till Next",
                value = tostring(scoreTillNext),
                inline = true
            })

            if lastScore then
                local gained = totalPoints - lastScore
                local averagePer10m = gained

                table.insert(fields, {
                    name = "‚è±Ô∏è Total Points Earned (10m)",
                    value = tostring(averagePer10m),
                    inline = true
                })

                if averagePer10m > 0 then
                    local estimatedMinutes = math.ceil((scoreTillNext / averagePer10m) * 10)
                    table.insert(fields, {
                        name = "‚è≥ Est. Time Till Next",
                        value = math.max(estimatedMinutes, 1) .. " minutes",
                        inline = true
                    })
                end
            end
        end

        if success and memberPointsStr and currentScores then
            table.insert(fields, {
                name = "üìã All Member Points",
                value = "```\n" .. memberPointsStr .. "\n```",
                inline = false
            })

            if not firstRun then
                local deltas = {}
                for name, currentScore in pairs(currentScores) do
                    local previousScore = lastMemberScores[name] or 0
                    table.insert(deltas, {
                        name = name,
                        delta = currentScore - previousScore
                    })
                end

                table.sort(deltas, function(a, b) return a.delta > b.delta end)

                local deltaStr = ""
                for _, entry in ipairs(deltas) do
                    local sign = (entry.delta >= 0) and "+" or "-"
                    deltaStr = deltaStr .. entry.name .. ": " .. sign .. math.abs(entry.delta) .. "\n"
                end

                table.insert(fields, {
                    name = "üìà Gains Since Last Update",
                    value = "```\n" .. deltaStr .. "\n```",
                    inline = false
                })
            end

            lastMemberScores = currentScores
            lastScore = totalPoints
        else
            table.insert(fields, {
                name = "üìã All Member Points",
                value = "*Could not fetch member points.*",
                inline = false
            })
        end

        SendWebhook(url, "üì£ Leaderboard Update: " .. trackedClan, fields)
        firstRun = false
    else
        SendWebhook(url, "‚ö†Ô∏è Clan Not Found", {
            {
                name = "Notice",
                value = "`" .. trackedClan .. "` not found on the leaderboard.",
                inline = false
            }
        }, 0xFF0000)
    end
end

trackClan()

while true do
    task.wait(600)
    trackClan()
end
