if not isfolder("LenutSettings") then
    makefolder("LenutSettings")
end

if not isfolder("LenutSettings/BoogaBoogaReborn") then
    makefolder("LenutSettings/BoogaBoogaReborn")
end

if not game:IsLoaded() then game.Loaded:Wait() end 
repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
local cloneref = cloneref or function(...) return ... end

if not getgenv().SpoofedWalkspeed then
    local gmt = getrawmetatable(game)
    setreadonly(gmt,false)
    local oldindex = gmt.__index

    gmt.__index = newcclosure(function(self,b)
        if b == "WalkSpeed" then
            return 16
        end
        return oldindex(self,b)
    end)
end

getgenv().SpoofedWalkspeed = true

local lp = game.Players.LocalPlayer and cloneref(game:GetService("Players")).LocalPlayer
local rs = cloneref(game:GetService("RunService"))
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
local TweenService = cloneref(game:GetService("TweenService"))
local PathfindingService = cloneref(game:GetService("PathfindingService"))
local Lighting = cloneref(game:GetService("Lighting"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local Packets = require(ReplicatedStorage.Modules.Packets)
local BufferRemote = ReplicatedStorage:WaitForChild("ByteNetReliable", math.huge)
local ToolModule = require(lp.PlayerScripts.src.Game.Tool)
local ItemsModule = require(ReplicatedStorage.Modules.ItemData)
local ItemIDS = require(ReplicatedStorage.Modules.ItemIDS)
local TeleportService = cloneref(game:GetService("TeleportService"))
local CoreGui = cloneref(game:GetService("CoreGui"))
local lpId = game.Players:GetUserIdFromNameAsync(lp.Name)

for i,v in pairs(getconnections(lp.Idled)) do v:Disable() end

local itemsTable = {}
local whitelistedItems = {"object", "food"}

for i, v in pairs(ItemsModule) do
    if typeof(v) == "table" then
        for ii,vv in pairs(v) do
            if ii == "itemType" and table.find(whitelistedItems, vv) then
                table.insert(itemsTable, i)
            end
        end
    end
end

table.sort(itemsTable)

local foodTable = {}

for i, v in pairs(ItemsModule) do
    if typeof(v) == "table" then
        for ii,vv in pairs(v) do
            if ii == "itemType" and vv == "food" then
                table.insert(foodTable, i)
            end
        end
    end
end

table.sort(foodTable)

local fuelTable = {}

for i, v in pairs(ItemsModule) do
    if typeof(v) == "table" then
        for ii,vv in pairs(v) do
            if ii == "fuels" then
                table.insert(fuelTable, i)
            end
        end
    end
end

table.sort(fuelTable)

local seedTable = {}

for i, v in pairs(ItemsModule) do
    if typeof(v) == "table" then
        for ii,vv in pairs(v) do
            if ii == "grows" then
                table.insert(seedTable, i)
            end
        end
    end
end

table.sort(seedTable)

getgenv().yeKterceS1 = "AmI"
getgenv().yeKterceS2 = "orAmINot?"

local Fluent = loadstring(game:HttpGet("https://pastebin.com/raw/wWQMS5eY"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Booga Booga [Reborn] - Lenut Hub",
    SubTitle = "by ja5on7190",
    TabWidth = 160,
    Size = UDim2.fromOffset(500, 420),
    Acrylic = false,
    Theme = "Obsidian Glow",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Mobile = Window:AddTab({ Title = "Mobile", Icon = "rbxassetid://10734921524" }),
    Farming = Window:AddTab({ Title = "Farming", Icon = "rbxassetid://10709811110" }),
    XP = Window:AddTab({ Title = "XP", Icon = "rbxassetid://10734966248" }),
    Gold = Window:AddTab({ Title = "Gold Farming", Icon = "rbxassetid://10709776126" }),
    Crystal = Window:AddTab({ Title = "Crystal Farming", Icon = "rbxassetid://10709819149" }),
    FoodFarm = Window:AddTab({ Title = "Meat Farm", Icon = "rbxassetid://10723344737" }),
    Drop = Window:AddTab({ Title = "Drop", Icon = "rbxassetid://10709790948" }),
    Combat = Window:AddTab({ Title = "Combat", Icon = "rbxassetid://10734975692" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "rbxassetid://10723346959" }),
    Pickup = Window:AddTab({ Title = "Pickup", Icon = "rbxassetid://10723405649" }),
    Planting = Window:AddTab({ Title = "Planting", Icon = "rbxassetid://10747830374" }),
    --TweenCustom = Window:AddTab({ Title = "Custom Tween", Icon = "rbxassetid://10734920149" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "rbxassetid://10709797985" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "rbxassetid://10709810948" })
}

InterfaceManager:SetLibrary(Fluent)
SaveManager:SetLibrary(Fluent)

Window:SelectTab(1)

local buttonCreated = false

Tabs.Mobile:AddButton({
    Title = "Mobile Helper",
    Description = "Creates a button that allows mobile users to show and hide gui.",
    Callback = function()    
        if not buttonCreated then
            local gui = Instance.new("ScreenGui")
            gui.Parent = CoreGui
            local button = Instance.new("TextButton")
            button.Text = "Hide/Show"
            button.BackgroundColor3 = Color3.new(1, 1, 1)
            button.Size = UDim2.new(0, 75, 0, 75)
            button.Position = UDim2.new(0.5, -button.Size.X.Offset / 2, 0, -50)
            button.Parent = gui

            local uicorner = Instance.new("UICorner")
            uicorner.CornerRadius = UDim.new(0, 100)
            uicorner.Parent = button

            button.TextSize = 10
            button.TextColor3 = Color3.new(0, 0, 0)

            local function ToggleVisibility()
                for _, v in pairs(CoreGui:GetDescendants()) do
                    if v:IsA("Frame") and v.Size.X.Offset == 500 and v.Size.Y.Offset == 420 and v.Parent:IsA("ScreenGui") then
                        v.Visible = not v.Visible
                    end
                end
            end
        
            if UserInputService.TouchEnabled then
                button.Activated:Connect(ToggleVisibility)
            else
                button.MouseButton1Click:Connect(ToggleVisibility)
            end
        
            buttonCreated = true
        end
    end
})

local hitMultiDropdown = Tabs.Farming:AddDropdown("Hit MultiDropdown", {
    Title = "Auto Hit [...]",
    Description = "Select what you want to auto hit",
    Values = {"Resources", "Critters", "Ant Mounds", "Tribe Totems", "Humanoid Critters", "Structures"},
    Multi = true,
    Default = {},
})

hitMultiDropdown:OnChanged(function(hits)
    getgenv().farmResources = false
    getgenv().farmCritters = false
    getgenv().farmMounds = false
    getgenv().farmTotems = false
    getgenv().farmHumCritter = false
    getgenv().farmStructures = false

    for hit, _ in pairs(hits) do
        if hit == "Resources" then
            getgenv().farmResources = true
            spawn(hitResources)
        elseif hit == "Critters" then
            getgenv().farmCritters = true
            spawn(hitCritters)
        elseif hit == "Ant Mounds" then
            getgenv().farmMounds = true
            spawn(hitMounds)
        elseif hit == "Tribe Totems" then
            getgenv().farmTotems = true
            spawn(hitTotems)
        elseif hit == "Humanoid Critters" then
            getgenv().farmHumCritter = true
            spawn(hitHumCritter)
        elseif hit == "Structures" then
            getgenv().farmStructures = true
            spawn(hitStructures)
        end
    end
end)

Tabs.XP:AddParagraph({
    Title = "FYI",
    Content = "If the script remains focused on a tree for more than 60 seconds, the tree will be automatically deleted. This serves as a failsafe to prevent getting stuck on a target."
})

local sunTreeXPToggle = Tabs.XP:AddToggle("Sun Tree XP Toggle", 
{
    Title = "Sun Tree XP Farm", 
    Description = "Only toggle when you are on the sun tree island.",
    Default = false,
    Callback = function(v)
        getgenv().sunTreeXPFarm = v
        if v then
            spawn(farmSunTreeXP)
        end
    end 
})

local farmAncientTreeToggle = Tabs.XP:AddToggle("Farm Ancient Tree Toggle", 
{
    Title = "Farm Ancient Tree", 
    Description = "Toggle this along with Sun Tree XP Farm to also farm Ancient Tree.",
    Default = false,
    Callback = function(v)
        getgenv().farmAncient = v
    end 
})

local placeDockToggle = Tabs.XP:AddToggle("Place Dock Toggle", 
{
    Title = "Place dock under Ancient Tree", 
    Description = "This is not to catch the essence, it is to prevent player from falling down.",
    Default = false,
    Callback = function(v)
        getgenv().placeDock = v
        if v then
            spawn(dockPlacer)
        end
    end 
})

Tabs.Gold:AddParagraph({
    Title = "FYI",
    Content = "Be at the ice area with the 4 gold nodes."
})

local goldFarmToggle = Tabs.Gold:AddToggle("Gold Farm Toggle", 
{
    Title = "Gold Farm", 
    Default = false,
    Callback = function(v)
        getgenv().farmGold = v
        if v then
            spawn(goldFarm)
        end
    end 
})

local goldInChestToggle = Tabs.Gold:AddToggle("Gold In Chest Toggle", 
{
    Title = "Put Gold In Chest", 
    Description = "Make sure to place a chest in the center of the 4 gold nodes.",
    Default = false,
    Callback = function(v)
        getgenv().goldInChest = v
        if v then
            spawn(putGoldInChest)
        end
    end 
})

local fuelMultiDropdown = Tabs.Gold:AddDropdown("Fuel MultiDropdown", {
    Title = "Fuel",
    Description = "Select the fuel to use for campfire.",
    Values = fuelTable,
    Multi = true,
    Default = {},
})

local selectedFuels = {}

fuelMultiDropdown:OnChanged(function(fuels)
    selectedFuels = {}
    for fuel, _ in pairs(fuels) do
        table.insert(selectedFuels, fuel)
    end
end)

local fuelFireToggle = Tabs.Gold:AddToggle("Fuel Fire Toggle", 
{
    Title = "Refuel Campfire", 
    Description = "Make sure to place the campfires yourself.",
    Default = false,
    Callback = function(v)
        getgenv().fuelFire = v
        if v then
            spawn(reFuel)
        end
    end 
})

local coinPressToggle = Tabs.Gold:AddToggle("Coin Press Toggle", 
{
    Title = "Auto Coinpress", 
    Description = "Make sure to place the coinpress yourself.",
    Default = false,
    Callback = function(v)
        getgenv().convertGoldToCoin = v
        if v then
            spawn(autoGoldToCoin)
        end
    end 
})

Tabs.Crystal:AddParagraph({
    Title = "FYI",
    Content = "Be on the feather tree island."
})

local crystalFarmToggle = Tabs.Crystal:AddToggle("Crystal Farm Toggle", 
{
    Title = "Crystal Farm", 
    Default = false,
    Callback = function(v)
        getgenv().crystalFarm = v
        if v then
            spawn(farmCrystals)
        end
    end 
})

Tabs.FoodFarm:AddParagraph({
    Title = "FYI",
    Content = "This feature will basically keep killing your own player to collect the raw meat it drops!"
})

local MeatLabel = Tabs.FoodFarm:AddParagraph({
    Title = "Raw Meat Info",
    Content = "Count: Toggle Meat Farm First!"
})

local meatFarmToggle = Tabs.FoodFarm:AddToggle("Meat Farm Toggle", 
{
    Title = "Farm YOUR Meat!", 
    Description = "You will DIE, so make sure to not have anything that will drop when you dead.",
    Default = false,
    Callback = function(v)
        getgenv().farmMeat = v
        if v then
            spawn(meatFarm)
        end
    end 
})

local DropsDropdown = Tabs.Drop:AddDropdown("Drops Dropdown", {
    Title = "Items",
    Description = "Choose what you want to drop.",
    Values = itemsTable,
    Multi = false,
    Default = "",
})

local selectedDrop

DropsDropdown:OnChanged(function(drop)
    selectedDrop = drop
end)

local dropToggle = Tabs.Drop:AddToggle("Drop Toggle", 
{
    Title = "Drop [Selected Item]", 
    Default = false,
    Callback = function(v)
        getgenv().dropItem = v
        if v then
            spawn(itemDrop)
        end
    end 
})

local dropInChestToggle = Tabs.Drop:AddToggle("Drop In Chest Toggle", 
{
    Title = "Drop In Nearest Chest", 
    Description = "Toggle this while Drop [Selected Item] is toggled to drop into nearest chest.",
    Default = false,
    Callback = function(v)
        getgenv().dropIntoChest = v
    end 
})

local attackPlayerToggle = Tabs.Combat:AddToggle("Attack Player Toggle", 
{
    Title = "Attack Aura [Players]", 
    Default = false,
    Callback = function(v)
        getgenv().attackAura = v
        if v then
            spawn(HitPlayer)
        end
    end 
})

local noDoorsToggle = Tabs.Combat:AddToggle("No Doors Toggle", 
{
    Title = "Remove Doors", 
    Default = false,
    Callback = function(v)
        getgenv().removeDoors = v
        if v then
            spawn(noDoors)
        end
    end 
})

local noDocksToggle = Tabs.Combat:AddToggle("No Docks Toggle", 
{
    Title = "Remove Docks",
    Description = "This will prevent you from getting trapped by docks.",
    Default = false,
    Callback = function(v)
        getgenv().removeDocks = v
        if v then
            spawn(noDocks)
        end
    end 
})

local healSection = Tabs.Combat:AddSection("Heal")

local foodMultiDropdown = Tabs.Combat:AddDropdown("Food MultiDropdown", {
    Title = "Food",
    Description = "Select the food to auto eat.",
    Values = foodTable,
    Multi = true,
    Default = {},
})

local selectedHealingFood = {}

foodMultiDropdown:OnChanged(function(foods)
    selectedHealingFood = {}
    for food, _ in pairs(foods) do
        table.insert(selectedHealingFood, food)
    end
end)

local selectedHealth

local hpSlider = Tabs.Combat:AddSlider("HP Slider", 
{
    Title = "Health",
    Description = "Eat food at specific health.",
    Default = 50,
    Min = 0,
    Max = 99,
    Rounding = 1,
    Callback = function(health)
        selectedHealth = tonumber(health)
    end
})

local healToggle = Tabs.Combat:AddToggle("Heal Toggle", 
{
    Title = "Auto Eat/Heal", 
    Default = false,
    Callback = function(v)
        getgenv().autoHeal = v
        if v then
            spawn(eatForHP)
        end
    end 
})

local hungerSection = Tabs.Combat:AddSection("Hunger")

local foodHungerMultiDropdown = Tabs.Combat:AddDropdown("Food Hunger MultiDropdown", {
    Title = "Food",
    Description = "Select the food to auto eat.",
    Values = foodTable,
    Multi = true,
    Default = {},
})

local selectedFoods = {}

foodHungerMultiDropdown:OnChanged(function(foods)
    selectedFoods = {}
    for food, _ in pairs(foods) do
        table.insert(selectedFoods, food)
    end
end)

local selectedHunger

local hungerSlider = Tabs.Combat:AddSlider("Hunger Slider", 
{
    Title = "Hunger %",
    Description = "Eat food at specific hunger.",
    Default = 50,
    Min = 1,
    Max = 99,
    Rounding = 1,
    Callback = function(hunger)
        selectedHunger = tonumber(hunger)
    end
})

local hungerToggle = Tabs.Combat:AddToggle("Hunger Toggle", 
{
    Title = "Auto Eat/Hunger", 
    Default = false,
    Callback = function(v)
        getgenv().autoEat = v
        if v then
            spawn(eatForHunger)
        end
    end 
})

local voidSection = Tabs.Combat:AddSection("Void")

local selectedHP

local healthSlider = Tabs.Combat:AddSlider("Health Slider", 
{
    Title = "Health",
    Description = "Activate void shield when health reaches...",
    Default = 50,
    Min = 1,
    Max = 99,
    Rounding = 1,
    Callback = function(hp)
        selectedHP = tonumber(hp) 
    end
})

local voidShieldToggle = Tabs.Combat:AddToggle("Void Shield Toggle", 
{
    Title = "Auto Void Shield", 
    Default = false,
    Callback = function(v)
        getgenv().autoVoidShield = v
        if v then
            spawn(voidShield)
        end
    end 
})

local espMultiDropdown = Tabs.ESP:AddDropdown("ESP MultiDropdown", {
    Title = "ESP [...]",
    Values = {"Gods", "Critters", "Nodes/Lodes", "Players"},
    Multi = true,
    Default = {},
})

espMultiDropdown:OnChanged(function(esps)
    getgenv().godEsp = false
    getgenv().critterEsp = false
    getgenv().nodeEsp = false
    getgenv().playerEsp = false

    for esp, _ in pairs(esps) do
        if esp == "Gods" then
            getgenv().godEsp = true
            spawn(espGODS)
        elseif esp == "Critters" then
            getgenv().critterEsp = true
            spawn(espCRITTERS)
        elseif esp == "Nodes/Lodes" then
            getgenv().nodeEsp = true
            spawn(espNODES)
        elseif esp == "Players" then
            getgenv().playerEsp = true
            spawn(plrEsp)
        end
    end
end)

local selectedRange

local PlrEspSlider = Tabs.ESP:AddSlider("Plr ESP Slider", 
{
    Title = "ESP Range",
    Description = "ESP Range for Players.",
    Default = 500,
    Min = 0,
    Max = 5000,
    Rounding = 1,
    Callback = function(range)
        selectedRange = tonumber(range)
    end
})

local selectedTextSize = 10

local PlrEspTextSizeSlider = Tabs.ESP:AddSlider("Plr ESP Text Size Slider", 
{
    Title = "Player ESP Text Size",
    Description = "Change the size of the player esp text size. May need to retoggle for it to take affect.",
    Default = 10,
    Min = 1,
    Max = 100,
    Rounding = 1,
    Callback = function(textsize)
        selectedTextSize = tonumber(textsize)
    end
})

local itemsMultiDropdown = Tabs.Pickup:AddDropdown("Items MultiDropdown", {
    Title = "Items",
    Description = "Select the items to auto pickup.",
    Values = itemsTable,
    Multi = true,
    Default = {},
})

local selectedItems = {}

itemsMultiDropdown:OnChanged(function(items)
    selectedItems = {}
    for item, _ in pairs(items) do
        table.insert(selectedItems, item)
    end
end)

local pickUpToggle = Tabs.Pickup:AddToggle("Pickup Toggle", 
{
    Title = "Auto Pickup", 
    Default = false,
    Callback = function(v)
        getgenv().autoPickup = v
        if v then
            spawn(PickupItems)
        end
    end 
})

local pickFromChestToggle = Tabs.Pickup:AddToggle("Pickup From Chest Toggle", 
{
    Title = "Pickup from Chest", 
    Description = "Only toggle if you also want to collect from chest as well.",
    Default = false,
    Callback = function(v)
        getgenv().pickupFromChest = v
    end 
})

local placePlantBoxToggle = Tabs.Planting:AddToggle("Place Plant Box Toggle", 
{
    Title = "Place Plant Boxes", 
    Description = "Walk around to place them after toggling.",
    Default = false,
    Callback = function(v)
        getgenv().autoPlacePlantBox = v
        if v then
            spawn(placePlantBox)
        end
    end 
})

local seedDropdown = Tabs.Planting:AddDropdown("Seeds Dropdown", {
    Title = "Seed to Plant",
    Description = "Select what you want to auto plant.",
    Values = seedTable,
    Multi = false,
    Default = "",
})

local plantSeedsToggle = Tabs.Planting:AddToggle("Plant Seeds Toggle", 
{
    Title = "Plant Seeds", 
    Default = false,
    Callback = function(v)
        getgenv().autoPlant = v
        if v then
            spawn(plantSeeds)
        end
    end 
})

local harvestToggle = Tabs.Planting:AddToggle("Plant Harvest Toggle", 
{
    Title = "Harvest Crops", 
    Default = false,
    Callback = function(v)
        getgenv().autoHarvest = v
        if v then
            spawn(harvestCrops)
        end
    end 
})

local selectedSeed

seedDropdown:OnChanged(function(seed)
    selectedSeed = seed
end)

--[[
local Section = Tabs.TweenCustom:AddSection("Create/Manage Configs")

local TweenTBL = {}

local function getConfigs()
    TweenTBL = {}
    local folderName = "LenutTween"

    if not isfolder(folderName) then
        makefolder(folderName)
    else
        for i,v in pairs(listfiles(folderName)) do
            if v:match("%.txt$") then
                local configName = v:gsub("LenutTween/", "")
                local finalConfigName = configName:gsub(".txt", "")
                table.insert(TweenTBL, finalConfigName)
            end
        end
    end
    return TweenTBL
end

local TweenDropdown = Tabs.TweenCustom:AddDropdown("Tween Dropdown", {
    Title = "Saved Tween Configs",
    Description = "Select which config to use.",
    Values = getConfigs(),
    Multi = false,
    Default = "",
})

local selectedConfig

TweenDropdown:OnChanged(function(config)
    selectedConfig = config
end)

Tabs.TweenCustom:AddButton({
    Title = "Refresh Config Dropdown",
    Callback = function()
        TweenDropdown:SetValues(getConfigs())
    end
})

Tabs.TweenCustom:AddButton({
    Title = "Delete Selected Config",
    Callback = function()
        delfile("LenutTween/"..selectedConfig..".txt")
        TweenDropdown:SetValues(getConfigs())
    end
})

local posTBL = {}

local TweenToggle = Tabs.TweenCustom:AddToggle("Tween Toggle", 
{
    Title = "Record!", 
    Description = "Toggle and start walking to save all positions.",
    Default = false,
    Callback = function(v)
        getgenv().recordPosition = v
        
        if v then
            spawn(function()
                while getgenv().recordPosition do
                    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
                        table.insert(posTBL, tostring(lp.Character.HumanoidRootPart.Position))
                    end
                    task.wait(0.5)
                end
            end)
        end
    end
})

Tabs.TweenCustom:AddButton({
    Title = "Clear Currently Saved Positions",
    Description = "This will wipe all your current recorded positions.",
    Callback = function()
        posTBL = {}
    end
})

Tabs.TweenCustom:AddButton({
    Title = "Overwrite Config",
    Callback = function()
        if #posTBL > 0 then
            writefile("LenutTween/"..selectedConfig..".txt", table.concat(posTBL, "\n"))
        end
    end
})

local selectedConfigName

local TweenConfigInput = Tabs.TweenCustom:AddInput("Tween Config Input", {
    Title = "Config Name",
    Default = "",
    Placeholder = "...",
    Numeric = false,
    Finished = false,
    Callback = function(configName)
        selectedConfigName = configName
    end
})

Tabs.TweenCustom:AddButton({
    Title = "Save Config",
    Callback = function()
        if (selectedConfigName ~= "" or selectedConfigName ~= " " or selectedConfigName ~= nil) and selectedConfigName then
            writefile("LenutTween/"..selectedConfigName..".txt", table.concat(posTBL, "\n"))
        else
            Fluent:Notify({
                Title = "Error!",
                Content = "Please give the config a name.",
                Duration = 5
            })
            return
        end
    end
})

local Section = Tabs.TweenCustom:AddSection("Play Configs")

local TweenToggle = Tabs.TweenCustom:AddToggle("Tween Play Toggle", 
{
    Title = "Play Tween [Selected Config]", 
    Default = false,
    Callback = function(v)
        getgenv().playTween = v
        if v then
            local activeTweens = {}
            local speed = 22
            local configFileName = "LenutTween/"..selectedConfig..".txt"
            local positions = {}
            
            if isfile(configFileName) then
                local fileData = readfile(configFileName)
                for line in fileData:gmatch("[^\r\n]+") do
                    local x, y, z = line:match("([%d%.%-]+),%s*([%d%.%-]+),%s*([%d%.%-]+)")
                    if x and y and z then
                        table.insert(positions, Vector3.new(tonumber(x), tonumber(y), tonumber(z)))
                    end
                end
            else
                warn("Config file not found!")
                return
            end

            if #positions == 0 then
                warn("No positions found in the config!")
                return
            end

            local currentIndex = 1
            local direction = 1 

            spawn(function()
                while getgenv().playTween do
                    local targetPosition = positions[currentIndex]

                    local tweenInfo = TweenInfo.new(
                        (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                        Enum.EasingStyle.Linear
                    )

                    for _, part in pairs(lp.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            if activeTweens[part] then
                                activeTweens[part]:Cancel()
                            end

                            local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                            partTween:Play()
                            activeTweens[part] = partTween
                        end
                    end
                    
                    task.wait(tweenInfo.Time)

                    if direction == 1 then
                        currentIndex = currentIndex + 1
                        if currentIndex > #positions then
                            direction = -1
                            currentIndex = #positions - 1
                        end
                    else
                        currentIndex = currentIndex - 1
                        if currentIndex < 1 then
                            direction = 1
                            currentIndex = 2
                        end
                    end
                    if not getgenv().playTween then
                        for _, tween in pairs(activeTweens) do
                            tween:Cancel()
                        end
                        activeTweens = {}
                    end
                end
            end)
            for _, tween in pairs(activeTweens) do
                tween:Cancel()
            end
            activeTweens = {}
        end
    end 
})
--]]

Tabs.Misc:AddParagraph({
    Title = "AntiAFK Status",
    Content = "Enabled!"
})

getgenv().selectedSpeed = 16

local walkSpeedSlider = Tabs.Misc:AddSlider("Walkspeed Slider", 
{
    Title = "Walkspeed",
    Description = "Bypasses water slowdown.",
    Default = 16,
    Min = 16,
    Max = 22,
    Rounding = 1,
    Callback = function(speed)
        getgenv().selectedSpeed = tonumber(speed)
        if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character.Humanoid.WalkSpeed = getgenv().selectedSpeed
        end
    end
})

local infJump
local infJumpDebounce = false

local infJumpToggle = Tabs.Misc:AddToggle("Inf Jump Toggle", 
{
    Title = "Infinite Jump", 
    Default = false,
    Callback = function(v)
        if v then
            if infJump then infJump:Disconnect() end
            infJumpDebounce = false
            infJump = UserInputService.JumpRequest:Connect(function()
                if not infJumpDebounce then
                    infJumpDebounce = true
                    lp.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait(0.1)
                    infJumpDebounce = false
                end
            end)
        else
            if infJump then infJump:Disconnect() end
            infJumpDebounce = false
        end
    end 
})

Tabs.Misc:AddButton({
    Title = "TP to Void",
    Callback = function()
        TeleportService:Teleport(11879754496, lp)
    end
})

Tabs.Misc:AddButton({
    Title = "Fullbright",
    Callback = function()
        Lighting.Brightness = 2
        Lighting.ClockTime = 14
        Lighting.FogEnd = 100000
        Lighting.GlobalShadows = false
        Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
    end
})

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:SetLibrary(Fluent)
SaveManager:SetFolder("LenutSettings/BoogaBoogaReborn")
SaveManager:BuildConfigSection(Tabs.Settings)

--Functions

function HitTarget(Ids)
	Packets.SwingTool.send(Ids)
end

local function getClosest(objects, range)
    local targets = {}

    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        local lpPosition = lp.Character.PrimaryPart.Position
        for _, obj in pairs(objects) do
            local ObjPos
            if obj:IsA("BasePart") then
                ObjPos = obj.Position
            elseif obj:IsA("Model") then
                ObjPos = obj.WorldPivot.Position
            end
            local distance = (lpPosition - ObjPos).Magnitude
            if distance <= tonumber(range) then
                table.insert(targets, obj)
            end
        end
    end
    return targets
end

local function refreshCache(tbl, path)
    for k in pairs(tbl) do
        tbl[k] = nil
    end

    for _, v in pairs(path:GetChildren()) do
        table.insert(tbl, v)
    end
end

local cachedResources = {}
local cacheRefreshInterval = 5

function hitResources()
    task.spawn(function()
        while getgenv().farmResources do
            refreshCache(cachedResources, workspace.Resources)
            task.wait(cacheRefreshInterval)
        end
    end)
    while getgenv().farmResources do
        local targets = getClosest(cachedResources, 20)

        local entityIds = {}
        for _, resource in pairs(targets) do
            if resource:GetAttribute("EntityID") and resource:FindFirstChild("Health") and resource:FindFirstChild("Health").Value > 0 then
                table.insert(entityIds, resource:GetAttribute("EntityID"))
            end
        end
        if #entityIds > 0 then
            HitTarget(entityIds)
            ToolModule.SwingTool()
        end
        entityIds = {}
        task.wait(0.1)
    end
end

local cachedCritters = {}

function hitCritters()
    task.spawn(function()
        while getgenv().farmCritters do
            refreshCache(cachedCritters, workspace.Critters)
            task.wait(cacheRefreshInterval)
        end
    end)
    while getgenv().farmCritters do
        local targets = getClosest(cachedCritters, 20)

        local entityIds = {}
        for _, critter in pairs(targets) do
            if critter:GetAttribute("EntityID") and critter:FindFirstChild("Health") and critter:FindFirstChild("Health").Value > 0 then
                table.insert(entityIds, critter:GetAttribute("EntityID"))
            end
        end
        if #entityIds > 0 then
            HitTarget(entityIds)
            ToolModule.SwingTool()
        end
        entityIds = {}
        task.wait(0.1)
    end
end

local cachedMounds = {}

local function refreshMoundCache()
    cachedMounds = {}

    for _, v in pairs(workspace.Mounds:GetChildren()) do
        table.insert(cachedMounds, v)
    end

    for _, vv in pairs(workspace.ScavengerMounds:GetChildren()) do
        table.insert(cachedMounds, vv)
    end
end

function hitMounds()
    task.spawn(function()
        while getgenv().farmMounds do
            refreshCache(cachedMounds, workspace.Mounds)
            task.wait(cacheRefreshInterval)
        end
    end)
    while getgenv().farmMounds do
        local targets = getClosest(cachedMounds, 20)

        local entityIds = {}
        for _, mound in pairs(targets) do
            if mound:GetAttribute("EntityID") and mound:FindFirstChild("Health") and mound:FindFirstChild("Health").Value > 0 then
                table.insert(entityIds, mound:GetAttribute("EntityID"))
            end
        end
        if #entityIds > 0 then
            HitTarget(entityIds)
            ToolModule.SwingTool()
        end
        entityIds = {}
        task.wait(0.1)
    end
end

local cachedTotems = {}

function hitTotems()
    task.spawn(function()
        while getgenv().farmTotems do
            refreshCache(cachedTotems, workspace.Totems)
            task.wait(cacheRefreshInterval)
        end
    end)
    while getgenv().farmTotems do
        local targets = getClosest(cachedTotems, 20)

        local entityIds = {}
        for _, totem in pairs(targets) do
            if totem:GetAttribute("EntityID") and totem:FindFirstChild("Health") and totem:FindFirstChild("Health").Value > 0 then
                table.insert(entityIds, totem:GetAttribute("EntityID"))
            end
        end
        if #entityIds > 0 then
            HitTarget(entityIds)
            ToolModule.SwingTool()
        end
        entityIds = {}
        task.wait(0.1)
    end
end

local cachedHumCritters = {}

function hitHumCritter()
    task.spawn(function()
        while getgenv().farmHumCritter do
            refreshCache(cachedHumCritters, workspace.HumanoidCritters)
            task.wait(cacheRefreshInterval)
        end
    end)
    while getgenv().farmHumCritter do
        local targets = getClosest(cachedHumCritters, 20)

        local entityIds = {}
        for _, humCritter in pairs(targets) do
            if humCritter:GetAttribute("EntityID") and humCritter:FindFirstChild("Health") and humCritter:FindFirstChild("Health").Value > 0 then
                table.insert(entityIds, humCritter:GetAttribute("EntityID"))
            end
        end
        if #entityIds > 0 then
            HitTarget(entityIds)
            ToolModule.SwingTool()
        end
        entityIds = {}
        task.wait(0.1)
    end
end

local cachedStructures = {}

function hitStructures()
    task.spawn(function()
        while getgenv().farmStructures do
            refreshCache(cachedStructures, workspace.Deployables)
            task.wait(cacheRefreshInterval)
        end
    end)
    while getgenv().farmStructures do
        local targets = getClosest(cachedStructures, 20)

        local entityIds = {}
        for _, structure in pairs(targets) do
            if structure:GetAttribute("EntityID") and structure:FindFirstChild("Health") and structure:FindFirstChild("Health").Value > 0 then
                table.insert(entityIds, structure:GetAttribute("EntityID"))
            end
        end
        if #entityIds > 0 then
            HitTarget(entityIds)
            ToolModule.SwingTool()
        end
        entityIds = {}
        task.wait(0.1)
    end
end

local function getClosestTarget()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for _, tree in pairs(workspace.Resources:GetChildren()) do
            local isAncientTree = tree.Name == "Ancient Tree"
            local isValidTree = (tree.Name:find("Sun") or tree.Name:find("Tree") or tree.Name == "Bush")
            
            if getgenv().farmAncient or not isAncientTree then
                if isValidTree and not tree.Name:find("Petrified") and tree:IsA("Model") and tree:FindFirstChild("Health") and tree.Health.Value > 0 and tree.PrimaryPart.Position.Y > 300 then
                    local distance = (lp.Character.PrimaryPart.Position - tree.PrimaryPart.Position).Magnitude
                    if distance < 450 and distance < closest then
                        closest = distance
                        target = tree
                    end
                end
            end
        end    

        for _, critter in pairs(workspace.Critters:GetChildren()) do
            if critter.Name == "Shelly Spirit" and critter.PrimaryPart.Position.Y > 300 then
                local critterDistance = (lp.Character.PrimaryPart.Position - critter.PrimaryPart.Position).Magnitude
                if critterDistance < closest then
                    closest = critterDistance
                    target = critter
                end
            end
        end
        return target
    end
end

local speed = 18

function farmSunTreeXP()
    local activeTweens = {}
    local targetTimer = {}
    local currentTarget = nil

    local essenceIds = {}
    while getgenv().sunTreeXPFarm do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            if lp.Character.PrimaryPart.Position.Y < 300 then
                sunTreeXPToggle:SetValue(false)
                Fluent:Notify({
                    Title = "NO!",
                    Content = "You are not close enough to the sun tree island",
                    Duration = 10
                })
            end
            for _, v in pairs(workspace.Items:GetChildren()) do
                if v.Name == "Essence" and v:GetAttribute("EntityID") then
                    if (lp.Character.PrimaryPart.Position - v.Position).Magnitude <= 50 then
                        local entityId = v:GetAttribute("EntityID")
                        if entityId then
                            table.insert(essenceIds, entityId)
                        end
                        for _,essence in pairs(essenceIds) do
                            Packets.Pickup.send(essence)
                        end
                    end
                end
            end
            essenceIds = {}

            local entityIds = {}
            for _, v in pairs(workspace.Resources:GetChildren()) do
                local isAncientTree = v.Name == "Ancient Tree"
                local isValidTree = (v.Name:find("Sun") or v.Name:find("Tree") or v.Name == "Bush")
                
                if getgenv().farmAncient or not isAncientTree then
                    if isValidTree and v:FindFirstChild("Health") and v.Health.Value > 0 and v:GetAttribute("EntityID") then
                        if (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude <= 12 then
                            local entityId = v:GetAttribute("EntityID")
                            if entityId then
                                table.insert(entityIds, entityId)
                                HitTarget(entityIds)
                                ToolModule.SwingTool()
                            end
                        end
                    end
                end
            end
            entityIds = {}        

            local shellyEntityIds = {}
            for _, v in pairs(workspace.Critters:GetChildren()) do
                if v.Name == "Shelly Spirit" and v:FindFirstChild("Health") and v.Health.Value > 0 and v:GetAttribute("EntityID") then
                    if (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude <= 7 then
                        local entityId = v:GetAttribute("EntityID")
                        if entityId then
                            table.insert(shellyEntityIds, entityId)
                            HitTarget(shellyEntityIds)
                            ToolModule.SwingTool()
                        end
                    end
                end
            end
            shellyEntityIds = {}

            local target = getClosestTarget()

            if target then
                if target.Name == "Ancient Tree" then
                    currentTarget = target
                elseif currentTarget ~= target then
                    currentTarget = target
                    targetTimer[currentTarget] = tick()
                elseif tick() - targetTimer[currentTarget] > 60 then
                    target:Destroy()
                    currentTarget = nil
                    targetTimer = {}
                end    

                if currentTarget then
                    local groundLevel = lp.Character.PrimaryPart.Position.Y
                    local offset = (target.Name == "Ancient Tree") and Vector3.new(0, groundLevel - target.PrimaryPart.Position.Y, 10) or Vector3.new(0, groundLevel - target.PrimaryPart.Position.Y, 5)
                    local targetPosition = target.PrimaryPart.Position + offset
            
                    local tweenInfo = TweenInfo.new(
                        (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                        Enum.EasingStyle.Linear
                    )
            
                    for _, part in pairs(lp.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            if activeTweens[part] then
                                activeTweens[part]:Cancel()
                            end
            
                            local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                            partTween:Play()
                            activeTweens[part] = partTween
                        end
                    end
                    if not getgenv().sunTreeXPFarm then
                        for _, tween in pairs(activeTweens) do
                            tween:Cancel()
                        end
                        activeTweens = {}
                    end
                end
            end
        end
        task.wait(0.1)
    end
    for _, tween in pairs(activeTweens) do
        tween:Cancel()
    end
    activeTweens = {}
end

local function checkDockMaterials()
    local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
    for i, v in pairs(PlayerData) do
        if typeof(v) == "table" and i == "inventory" then
            local hasEnoughLogs = false
            local hasEnoughWood = false
            
            for i2, v2 in pairs(v) do
                if v2.name == "Log" and v2.quantity >= 2 then
                    hasEnoughLogs = true
                elseif v2.name == "Wood" and v2.quantity >= 4 then
                    hasEnoughWood = true
                end
            end

            if not hasEnoughLogs or not hasEnoughWood then
                return false
            end
        end
    end
    return true
end

local dockCheckPos = CFrame.new(-525.865784, 311.015594, -1190.44995, 0.178634465, -5.45175673e-08, 0.983915567, 6.60344881e-08, 1, 4.34199166e-08, -0.983915567, 5.7216063e-08, 0.178634465)

function dockPlacer()
    local sentMsg = false
    while getgenv().placeDock do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            local dockFound = false
            local wasTrue = false

            for _, v in pairs(workspace.Deployables:GetChildren()) do
                if v.Name == "Dock" and v.PrimaryPart then
                    local distance = (v.PrimaryPart.Position - dockCheckPos.Position).Magnitude
                    if distance <= 100 then
                        dockFound = true
                        break
                    end
                end
            end

            if not dockFound then
                if checkDockMaterials() then
                    if getgenv().sunTreeXPFarm then
                        wasTrue = true
                        getgenv().sunTreeXPFarm = false
                    end
                    local targetPosition = dockCheckPos.Position
                    local tweenInfo = TweenInfo.new(
                        (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                        Enum.EasingStyle.Linear
                    )

                    for _, part in pairs(lp.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                            partTween:Play()
                        end
                    end

                    task.wait((lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed + 0.1)

                    if (lp.Character.PrimaryPart.Position - dockCheckPos.Position).Magnitude <= 3 then
                        local dockPos = {
                            buildingName = "Dock",
                            yrot = -481.27167474478483,
                            vec = Vector3.new(-572.3340454101562, 308.0910034179, -1205.1761)
                        }

                        Packets.PlaceStructure.send(dockPos)
                        if wasTrue and not getgenv().sunTreeXPFarm then
                            sunTreeXPToggle:SetValue(false)
                            sunTreeXPToggle:SetValue(true)
                        end
                    end
                else
                    if not sentMsg then
                        Fluent:Notify({
                            Title = "No Materials!",
                            Content = "You don't have the needed materials for a dock.",
                            Duration = 10
                        })
                        sentMsg = true
                    end
                end
            end
        end
        task.wait(0.5)
    end
end

local function getClosestIceChunk()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Resources:GetChildren()) do
            if v.Name == "Ice Chunk" and v:FindFirstChild("Breakaway") and v:FindFirstChild("Breakaway"):FindFirstChild("Gold Node") then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance < 70 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end     

local function getClosestGoldNode()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace:GetChildren()) do
            if v.Name == "Gold Node" and v:IsA("Model") then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance < 70 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

function goldFarm()
    local comparedCFrame = CFrame.new(938.634949, -2.35054517, -1404.23303, 0.967616081, 3.82984311e-09, 0.252426386, -4.43774351e-09, 1, 1.83890769e-09, -0.252426386, -2.89956015e-09, 0.967616081)
    local activeTweens = {}
    while getgenv().farmGold do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            if (lp.Character.PrimaryPart.Position - comparedCFrame.Position).Magnitude > 100 then
                goldFarmToggle:SetValue(false)
                Fluent:Notify({
                    Title = "NO!",
                    Content = "You are not close enough to ice area!",
                    Duration = 10
                })
            end
            local iceTarget = getClosestIceChunk()
            local goldTarget = getClosestGoldNode()

            local rawGoldId = {}
            for i,v in pairs(workspace.Items:GetChildren()) do
                if v.Name == "Raw Gold" then
                    if (lp.Character.PrimaryPart.Position - v.Position).Magnitude <= 30 then
                        table.insert(rawGoldId, v:GetAttribute("EntityID"))
                    end
                end
            end

            for i,v in pairs(rawGoldId) do
                if #rawGoldId > 0 then
                    Packets.Pickup.send(v)
                end
            end
            rawGoldId = {}

            if iceTarget then
                local iceId = iceTarget:GetAttribute("EntityID")
                if iceId then
                    HitTarget({iceId})
                    ToolModule.SwingTool()
                end
                
                local groundLevel = lp.Character.PrimaryPart.Position.Y
                local offset = Vector3.new(0,groundLevel - iceTarget.PrimaryPart.Position.Y,7)
                local targetPosition = iceTarget.PrimaryPart.Position + offset
                local tweenInfo = TweenInfo.new(
                    (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                    Enum.EasingStyle.Linear
                )

                for _, part in pairs(lp.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if activeTweens[part] then
                            activeTweens[part]:Cancel()
                        end

                        local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                        partTween:Play()
                        activeTweens[part] = partTween
                    end
                end
            elseif goldTarget then
                local goldId = goldTarget:GetAttribute("EntityID")
                if goldId then
                    HitTarget({goldId})
                    ToolModule.SwingTool()
                end

                local groundLevel = lp.Character.PrimaryPart.Position.Y
                local offset = Vector3.new(0,groundLevel - goldTarget.PrimaryPart.Position.Y,7)
                local targetPosition = goldTarget.PrimaryPart.Position + offset
                local tweenInfo = TweenInfo.new(
                    (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                    Enum.EasingStyle.Linear
                )

                for _, part in pairs(lp.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if activeTweens[part] then
                            activeTweens[part]:Cancel()
                        end

                        local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                        partTween:Play()
                        activeTweens[part] = partTween
                    end
                end
            end
        end
        task.wait(0.1)
        if not getgenv().farmGold then
            for _, tween in pairs(activeTweens) do
                tween:Cancel()
            end
            activeTweens = {}
        end
    end
    for _, tween in pairs(activeTweens) do
        tween:Cancel()
    end
    activeTweens = {}
end

local function getClosestChest()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Deployables:GetChildren()) do
            if v.Name == "Chest" then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance <= 60 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

local function checkForRawGold()
    local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
    for i,v in pairs(PlayerData) do
        if typeof(v) == "table" and i == "inventory" then
            for i2,v2 in pairs(v) do
                if v2.name == "Raw Gold" then
                    return true
                end
            end
        end
    end
    return false
end

function putGoldInChest()
    local activeTweens = {}
    local wasTrue = false
    while getgenv().goldInChest do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            local target = getClosestChest()
            if target and not getClosestGoldNode() and not getClosestIceChunk() then
                local goldBarsIds = {}
                for i,v in pairs(target:GetDescendants()) do
                    if v.Name == "Gold" then
                        if (lp.Character.PrimaryPart.Position - v.Position).Magnitude <= 30 then
                            table.insert(goldBarsIds, v:GetAttribute("EntityID"))
                        end
                    end
                end

                for i,v in pairs(goldBarsIds) do
                    Packets.Pickup.send(v)
                end
                goldBarsIds = {}

                for i,v in pairs(workspace.Items:GetChildren()) do
                    if v.Name == "Raw Gold" then
                        if (lp.Character.PrimaryPart.Position - v.Position).Magnitude <= 30 then
                            v.CFrame = target:FindFirstChild("Base").CFrame + Vector3.new(0, 2, 0)
                        end
                    end
                end

                local chestDoor = target:FindFirstChild("Door")
                if chestDoor then
                    chestDoor:Destroy()
                end
                if checkForRawGold() then
                    local groundLevel = lp.Character.PrimaryPart.Position.Y
                    local offset = Vector3.new(0, groundLevel - target.PrimaryPart.Position.Y, 5)
                    local targetPosition = target.PrimaryPart.Position + offset
            
                    local tweenInfo = TweenInfo.new(
                        (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                        Enum.EasingStyle.Linear
                    )
            
                    for _, part in pairs(lp.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            if activeTweens[part] then
                                activeTweens[part]:Cancel()
                            end
            
                            local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                            partTween:Play()
                            activeTweens[part] = partTween
                        end
                    end
                    if (lp.Character.PrimaryPart.Position - targetPosition).Magnitude <= 3 then
                        if getgenv().farmGold then
                            wasTrue = true
                            getgenv().farmGold = false
                        end
                        local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
                        for i,v in pairs(PlayerData) do
                            if typeof(v) == "table" and i == "inventory" then
                                for i2,v2 in pairs(v) do
                                    if v2.name == "Raw Gold" then
                                        Packets.DropBagItem.send(i2)
                                    end
                                end
                            end
                        end
                    end
                end
            else
                if wasTrue and not getgenv().farmGold then
                    goldFarmToggle:SetValue(false)
                    goldFarmToggle:SetValue(true)
                    wasTrue = false
                end
            end
            if not getgenv().goldInChest then
                for _, tween in pairs(activeTweens) do
                    tween:Cancel()
                end
                activeTweens = {}
            end
        end
        task.wait()
    end
    for _, tween in pairs(activeTweens) do
        tween:Cancel()
    end
    activeTweens = {}
end

local function getClosestFire()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Deployables:GetChildren()) do
            if v.Name == "Campfire" and v:FindFirstChild("Board") and v:FindFirstChild("Board"):FindFirstChild("Billboard"):FindFirstChild("Backdrop"):FindFirstChild("TextLabel").Text == "0" then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance <= 60 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

function reFuel()
    while getgenv().fuelFire do
        if not selectedFuels or #selectedFuels <= 0 then
            fuelFireToggle:SetValue(false)
            Fluent:Notify({
                Title = "No Fuel Selected!",
                Content = "You haven't selected a fuel source to use.",
                Duration = 10
            })
            return
        end        

        local target = getClosestFire()
        if target then
            local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
            local fuelUsed = false
            for _, playerItem in pairs(PlayerData.inventory or {}) do
                for _, selectedFuel in pairs(selectedFuels) do
                    if playerItem.name == selectedFuel then
                        local fuelData = {
                            entityID = target:GetAttribute("EntityID"),
                            itemID = ItemIDS[selectedFuel]
                        }
                        Packets.InteractStructure.send(fuelData)
                        fuelUsed = true
                        break
                    end
                end
                if fuelUsed then break end
            end
        end
        task.wait(1)
    end
end

local function getClosestCoinPress()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Deployables:GetChildren()) do
            if v.Name == "Coin Press" then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance <= 60 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

local function checkForGold()
    local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
    for i,v in pairs(PlayerData) do
        if typeof(v) == "table" and i == "inventory" then
            for i2,v2 in pairs(v) do
                if v2.name == "Gold" then
                    return true
                end
            end
        end
    end
    return false
end

function autoGoldToCoin()
    local activeTweens = {}
    while getgenv().convertGoldToCoin do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            local target = getClosestCoinPress()

            local coin2Ids = {}
            for i,v in pairs(workspace.Items:GetChildren()) do
                if v.Name == "Coin2" then
                    if (lp.Character.PrimaryPart.Position - v.Position).Magnitude <= 40 then
                        table.insert(coin2Ids, v:GetAttribute("EntityID"))
                    end
                end
            end

            for i,v in pairs(coin2Ids) do
                Packets.Pickup.send(v)
            end
            coin2Ids = {}

            if target and not getClosestIceChunk() and not getClosestGoldNode() and not checkForRawGold() and checkForGold() then
                local groundLevel = lp.Character.PrimaryPart.Position.Y
                local offset = Vector3.new(0, groundLevel - target.PrimaryPart.Position.Y, 5)
                local targetPosition = target.PrimaryPart.Position + offset
        
                local tweenInfo = TweenInfo.new(
                    (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                    Enum.EasingStyle.Linear
                )
        
                for _, part in pairs(lp.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if activeTweens[part] then
                            activeTweens[part]:Cancel()
                        end
        
                        local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                        partTween:Play()
                        activeTweens[part] = partTween
                    end
                end
                if (lp.Character.PrimaryPart.Position - targetPosition).Magnitude <= 0.5 then
                    local coinData = {
                        entityID = target:GetAttribute("EntityID"),
                        itemID = ItemIDS.Gold
                    }
                    Packets.InteractStructure.send(coinData)
                end
            end
        end
        task.wait()
    end
end

local function getClosestCrystalNode()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Resources:GetChildren()) do
            if v.Name == "Crystal Lode" and v.PrimaryPart.Position.Y <= 155 then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude

                if distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

function farmCrystals()
    local activeTweens = {}
    while getgenv().crystalFarm do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            if (lp.Character.PrimaryPart.Position.Y < 145 or lp.Character.PrimaryPart.Position.Y > 200) then
                crystalFarmToggle:SetValue(false)
                Fluent:Notify({
                    Title = "NO!",
                    Content = "You are not close enough to feather tree island!",
                    Duration = 10
                })
            end
            local target = getClosestCrystalNode()
            local eIds = {}

            local crystalIds = {}
            for i,v in pairs(workspace.Items:GetChildren()) do
                if v.Name == "Crystal Chunk" then
                    if (lp.Character.PrimaryPart.Position - v.Position).Magnitude <= 30 then
                        table.insert(crystalIds, v:GetAttribute("EntityID"))
                    end
                end
            end

            for i,v in pairs(crystalIds) do
                Packets.Pickup.send(v)
            end
            crystalIds = {}

            if target then
                table.insert(eIds, target:GetAttribute("EntityID"))
                HitTarget(eIds)
                ToolModule.SwingTool()
                eIds = {}

                local groundLevel = lp.Character.PrimaryPart.Position.Y
                local offset = Vector3.new(0, groundLevel - target.PrimaryPart.Position.Y, 7)
                local targetPosition = target.PrimaryPart.Position + offset
        
                local tweenInfo = TweenInfo.new(
                    (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                    Enum.EasingStyle.Linear
                )
        
                for _, part in pairs(lp.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if activeTweens[part] then
                            activeTweens[part]:Cancel()
                        end
        
                        local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                        partTween:Play()
                        activeTweens[part] = partTween
                    end
                end
                if not getgenv().crystalFarm then
                    for _, tween in pairs(activeTweens) do
                        tween:Cancel()
                    end
                    activeTweens = {}
                end
            end
        end
        task.wait(0.1)
    end
    for _, tween in pairs(activeTweens) do
        tween:Cancel()
    end
    activeTweens = {}
end

function meatFarm()
    while getgenv().farmMeat do
        local meatIds = {}
        for i,v in pairs(workspace.Items:GetChildren()) do
            if v.Name == "Raw Meat" then
                if (lp.Character.PrimaryPart.Position - v.Position).Magnitude <= 30 then
                    table.insert(meatIds, v:GetAttribute("EntityID"))
                end
            end
        end

        for i,v in pairs(meatIds) do
            Packets.Pickup.send(v)
        end
        meatIds = {}

        local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
        for i,v in pairs(PlayerData) do
            if typeof(v) == "table" and i == "inventory" then
                for i2,v2 in pairs(v) do
                    if v2.name == "Raw Meat" then
                        local quantity = v2.quantity
                        MeatLabel:SetDesc("Count: "..quantity)
                    end
                end
            end
        end

        if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
        end
        task.wait(0.1)
    end
end

function itemDrop()
    while getgenv().dropItem do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data

            if getgenv().dropIntoChest then
                local nearestChest = getClosestChest()
                for i, v in pairs(workspace.Items:GetChildren()) do
                    if v.Name == selectedDrop then
                        v.CFrame = nearestChest:FindFirstChild("Base").CFrame + Vector3.new(0, 2, 0)
                    end
                end
            end

            local foundItem = false
            for i, v in pairs(PlayerData) do
                if typeof(v) == "table" and i == "inventory" then
                    for i2, v2 in pairs(v) do
                        if v2.name == selectedDrop then
                            Packets.DropBagItem.send(i2)
                            foundItem = true
                            break
                        end
                    end
                end
            end

            if not foundItem then
                dropToggle:SetValue(false)
                Fluent:Notify({
                    Title = "Insufficient!",
                    Content = "You do not have any " .. selectedDrop,
                    Duration = 10
                })
            end
        end
        task.wait()
    end
end

local gameUtil = require(ReplicatedStorage.Modules.GameUtil)

local function getClosestPlayer()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Players:GetChildren()) do
            local targetId = game.Players:GetUserIdFromNameAsync(v.Name)
            if v and not gameUtil.AreAllies(lpId, targetId) and lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= lp.Name and v:FindFirstChild("HumanoidRootPart") then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance <= 10 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

function HitPlayer()   
    while getgenv().attackAura do
        local target = getClosestPlayer()
        if target and target:FindFirstChildOfClass("Humanoid").Health > 0 then
            local EId = target:GetAttribute("EntityID")
            HitTarget({EId})
            ToolModule.SwingTool()
        else
            target = nil
        end
        task.wait()
    end
end

function noDoors()
    while getgenv().removeDoors do
        for i,v in pairs(workspace.Deployables:GetChildren()) do
            if (v.Name:find("Gate") or v.Name == "Big Ol' Hut" or v.Name == "God Hut") then
                local Door = v:FindFirstChild("Door")
                if Door then
                    Door:Destroy()
                end
            end
        end
        task.wait(0.1)
    end
end

function noDocks()
    while getgenv().removeDocks do
        for i,v in pairs(workspace.Deployables:GetChildren()) do
            if v.Name == "Dock" or v.Name == "Bridge" then
                v:Destroy()
            end
        end
        task.wait(0.1)
    end
end

local autoHealConnection

function eatForHP()
    if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = lp.Character:WaitForChild("Humanoid")

        if autoHealConnection then
            autoHealConnection:Disconnect()
            autoHealConnection = nil
        end

        autoHealConnection = humanoid.HealthChanged:Connect(function(newHealth)
            if not getgenv().autoHeal then
                if autoHealConnection then
                    autoHealConnection:Disconnect()
                    autoHealConnection = nil
                end
                return
            end
            local healthNeeded = selectedHealth - newHealth
            if newHealth > 0 and newHealth < selectedHealth then
                local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data
                local healingInProgress = false

                for i, v in pairs(PlayerData) do
                    if typeof(v) == "table" and i == "inventory" then
                        for i2, v2 in pairs(v) do
                            if table.find(selectedHealingFood, v2.name) then
                                local nourishment = ItemsModule[v2.name].nourishment.health
                                if nourishment then
                                    local itemsNeeded = math.ceil(healthNeeded / nourishment)

                                    if not healingInProgress then
                                        task.spawn(function()
                                            for _ = 1, itemsNeeded do
                                                Packets.UseBagItem.send(i2)
                                            end
                                        end)
                                        healingInProgress = true
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
    end
end

function eatForHunger()
    while getgenv().autoEat do
        local StatsModule = require(lp.PlayerScripts.src.Game.StatHandler).ReformStats()
        if tonumber(StatsModule.food) <= selectedHunger then
            local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data

            for i, v in pairs(PlayerData) do
                if typeof(v) == "table" and i == "inventory" then
                    for i2, v2 in pairs(v) do
                        if table.find(selectedFoods, v2.name) then
                            Packets.UseBagItem.send(i2)
                        end
                    end
                end
            end
        end
        task.wait(0.1)
    end
end

function voidShield()
    while getgenv().autoVoidShield do
        if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            if lp.Character.Humanoid.Health <= selectedHP then
                Packets.VoodooSpell.send(lp.Character.PrimaryPart.Position)
            end
        end
        task.wait()
    end
end

local godConnection
local cachedGods = {}

function espGODS()
    local Resources = workspace:WaitForChild("Resources")

    local function createGodESP(v)
        if cachedGods[v] then return end 

        if v:FindFirstChild("GodBillboardGui") then
            cachedGods[v] = true
            return
        end

        local billboard = Instance.new("BillboardGui")
        billboard.Name = "GodBillboardGui"
        billboard.Size = UDim2.new(0, 200, 0, 50)
        billboard.StudsOffset = Vector3.new(0, 2, 0)
        billboard.AlwaysOnTop = true
        billboard.Adornee = v

        local textLabel = Instance.new("TextLabel", billboard)
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextColor3 = Color3.new(50 / 255, 205 / 255, 50 / 255)
        textLabel.TextStrokeTransparency = 0
        textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        textLabel.TextSize = 15
        textLabel.TextScaled = false
        textLabel.Text = v.Name

        billboard.Parent = v
        cachedGods[v] = true
    end

    if not godConnection then
        godConnection = rs.Heartbeat:Connect(function()
            if not getgenv().godEsp then
                for _, obj in pairs(Resources:GetChildren()) do
                    local billboard = obj:FindFirstChild("GodBillboardGui")
                    if billboard then
                        billboard:Destroy()
                    end
                end
                cachedGods = {}
                if godConnection then
                    godConnection:Disconnect()
                    godConnection = nil
                end
                return
            end

            for _, obj in pairs(Resources:GetChildren()) do
                if obj.Name:find("God") then
                    createGodESP(obj)
                end
            end

            for _, obj in pairs(Resources:GetChildren()) do
                if not obj.Name:find("God") and obj:FindFirstChild("GodBillboardGui") then
                    obj.GodBillboardGui:Destroy()
                    cachedGods[obj] = nil
                end
            end
        end)
    end
end

local critterEspConnection
local cachedCritters = {}

function espCRITTERS()
    local Critters = workspace:WaitForChild("Critters")

    local function createCritterESP(v)
        if cachedCritters[v] then return end

        if v:FindFirstChild("CritterBillboardGui") then
            cachedCritters[v] = true
            return
        end

        local billboard = Instance.new("BillboardGui")
        billboard.Name = "CritterBillboardGui"
        billboard.Size = UDim2.new(0, 200, 0, 50)
        billboard.StudsOffset = Vector3.new(0, 2, 0)
        billboard.AlwaysOnTop = true
        billboard.Adornee = v

        local textLabel = Instance.new("TextLabel", billboard)
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextColor3 = Color3.new(0, 1, 1)
        textLabel.TextStrokeTransparency = 0
        textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        textLabel.TextSize = 10
        textLabel.TextScaled = false
        textLabel.Text = v.Name

        billboard.Parent = v
        cachedCritters[v] = true
    end

    if not critterEspConnection then
        critterEspConnection = rs.Heartbeat:Connect(function()
            if not getgenv().critterEsp then
                for _, obj in pairs(Critters:GetChildren()) do
                    local billboard = obj:FindFirstChild("CritterBillboardGui")
                    if billboard then
                        billboard:Destroy()
                    end
                end
                cachedCritters = {}
                if critterEspConnection then
                    critterEspConnection:Disconnect()
                    critterEspConnection = nil
                end
                return
            end

            for _, obj in pairs(Critters:GetChildren()) do
                if obj:IsA("Model") and obj:FindFirstChild("Health").Value > 0 then
                    createCritterESP(obj)
                end
            end

            for _, obj in pairs(Critters:GetChildren()) do
                if not obj:IsA("Model") and obj:FindFirstChild("CritterBillboardGui") then
                    obj.CritterBillboardGui:Destroy()
                    cachedCritters[obj] = nil 
                end
            end
        end)
    end
end

local nodeEspConnection
local cachedNodes = {}

function espNODES()
    local Resources = workspace:WaitForChild("Resources")

    local function createNodeESP(v)
        if cachedNodes[v] then return end

        if v:FindFirstChild("NodeBillboardGui") then
            cachedNodes[v] = true
            return
        end

        local billboard = Instance.new("BillboardGui")
        billboard.Name = "NodeBillboardGui"
        billboard.Size = UDim2.new(0, 200, 0, 50)
        billboard.StudsOffset = Vector3.new(0, 2, 0)
        billboard.AlwaysOnTop = true
        billboard.Adornee = v

        local textLabel = Instance.new("TextLabel", billboard)
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextColor3 = Color3.new(1, 1, 1)
        textLabel.TextStrokeTransparency = 0
        textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        textLabel.TextSize = 10
        textLabel.TextScaled = false
        textLabel.Text = v.Name

        billboard.Parent = v
        cachedNodes[v] = true
    end

    if not nodeEspConnection then
        nodeEspConnection = rs.Heartbeat:Connect(function()
            if not getgenv().nodeEsp then
                for _, obj in pairs(Resources:GetChildren()) do
                    local billboard = obj:FindFirstChild("NodeBillboardGui")
                    if billboard then
                        billboard:Destroy()
                    end
                end
                cachedNodes = {} 
                if nodeEspConnection then
                    nodeEspConnection:Disconnect()
                    nodeEspConnection = nil
                end
                return
            end

            for _, obj in pairs(Resources:GetChildren()) do
                if obj.Name:find("Node") or obj.Name:find("Lode") then
                    createNodeESP(obj)
                end
            end

            for _, obj in pairs(Resources:GetChildren()) do
                if not (obj.Name:find("Node") or obj.Name:find("Lode")) and obj:FindFirstChild("NodeBillboardGui") then
                    obj.NodeBillboardGui:Destroy()
                    cachedNodes[obj] = nil
                end
            end
        end)
    end
end

local playerEspConnection

function plrEsp()
    local Players = workspace:WaitForChild("Players")

    local espCache = {}

    local function getArmor(player)
        local armor = {}
        for _, child in pairs(player:GetChildren()) do
            if (child.Name:find("Chestplate") or 
                child.Name:find("Greaves") or 
                child.Name:find("Helmet") or 
                child.Name:find("Shirt") or 
                (child.Name:find("Pants") and child.Name ~= "Pants Basic") or
                child.Name:find("Crown") or 
                child.Name:find("Mask") or 
                child.Name:find("Hood") or 
                child.Name:find("Shroud") or 
                child.Name:find("Halo") or 
                child.Name == "God Legs") then
                table.insert(armor, child.Name)
            end
        end
        return armor
    end

    local function getTools(player)
        local tools = {}
        local toolsFolder = player:FindFirstChild("Tools")
        if toolsFolder then
            for _, child in pairs(toolsFolder:GetChildren()) do
                table.insert(tools, child.Name)
            end
        end
        return tools
    end

    local function createOrUpdateESP(player)
        if not player:IsA("Model") or not player:FindFirstChild("HumanoidRootPart") then
            return
        end

        local billboard = espCache[player]
        if not billboard then
            billboard = Instance.new("BillboardGui")
            billboard.Name = "PlayerBillboardGui"
            billboard.Size = UDim2.new(0, 150, 0, 70)
            billboard.StudsOffset = Vector3.new(0, 2, 0)
            billboard.AlwaysOnTop = true
            billboard.Adornee = player:FindFirstChild("HumanoidRootPart")

            local textLabel = Instance.new("TextLabel", billboard)
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextColor3 = Color3.new(1, 1, 0)
            textLabel.TextStrokeTransparency = 0
            textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
            textLabel.TextSize = selectedTextSize
            textLabel.TextScaled = false
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.TextXAlignment = Enum.TextXAlignment.Center
            billboard.Parent = player:FindFirstChild("HumanoidRootPart")

            espCache[player] = billboard
        end

        local armor = getArmor(player)
        local tools = getTools(player)
        local armorText = "Armor: " .. (armor[1] and table.concat(armor, ", ") or "None")
        local toolsText = "Tools: " .. (tools[1] and table.concat(tools, ", ") or "None")
        billboard.TextLabel.Text = player.Name .. "\n" .. armorText .. "\n" .. toolsText
    end

    local function removeESP(player)
        local billboard = espCache[player]
        if billboard then
            billboard:Destroy()
            espCache[player] = nil
        end
    end

    local function updateESP()
        for _, player in pairs(Players:GetChildren()) do
            if player:IsA("Model") and player.Name ~= lp.Name then
                local humanoidRootPart = player:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    local distance = (lp.Character.PrimaryPart.Position - humanoidRootPart.Position).Magnitude
                    if distance <= selectedRange then
                        createOrUpdateESP(player)
                    else
                        removeESP(player)
                    end
                else
                    removeESP(player)
                end
            end
        end
    end

    local function removeAllESP()
        for player, _ in pairs(espCache) do
            removeESP(player)
        end
    end

    if not playerEspConnection then
        playerEspConnection = rs.Heartbeat:Connect(function(deltaTime)
            if not getgenv().playerEsp then
                removeAllESP()
                playerEspConnection:Disconnect()
                playerEspConnection = nil
                return
            end

            if math.random(1, 10) == 1 then
                updateESP()
            end
        end)
    end
end

local function getItemsInRange(range)
    local items = {}

    for i, v in pairs(workspace.Items:GetChildren()) do
        if table.find(selectedItems, v.Name) and lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            local itemPosition = nil
            if v:IsA("Model") then
                itemPosition = v.WorldPivot.Position
            elseif v:IsA("BasePart") then
                itemPosition = v.Position
            end

            local distance = (lp.Character.PrimaryPart.Position - itemPosition).Magnitude
            if distance <= range then
                table.insert(items, v)
            end
        end
    end
    if getgenv().pickupFromChest then
        for i,v in pairs(workspace.Deployables:GetDescendants()) do
            if table.find(selectedItems, v.Name) then
                if (lp.Character.PrimaryPart.Position - v.Parent.Parent.PrimaryPart.Position).Magnitude <= range then
                    table.insert(items, v)
                end
            end
        end
    end

    return items
end

function PickupItems()
    while getgenv().autoPickup do            
        local items = getItemsInRange(30)

        for _, item in pairs(items) do
            if item:GetAttribute("EntityID") then
                Packets.Pickup.send(item:GetAttribute("EntityID"))
            end
        end
        task.wait()
    end
end

local function checkPlantBoxMaterials()
    local PlayerData = require(ReplicatedStorage.Modules.GameUtil).Data

    for i, v in pairs(PlayerData) do
        if typeof(v) == "table" and i == "inventory" then
            local hasLeaves = false
            local hasWood = false

            for _, item in pairs(v) do
                if item.name == "Leaves" then
                    hasLeaves = item.quantity >= 2
                elseif item.name == "Wood" then
                    hasWood = item.quantity >= 2
                end
            end

            if not hasLeaves or not hasWood then
                return false
            end

            return true
        end
    end

    return false
end

function placePlantBox()
    while getgenv().autoPlacePlantBox do

        if lp and lp.Character and lp.Character:FindFirstChild("LeftFoot") then
            if checkPlantBoxMaterials() then
                local plantBox = {
                    buildingName = "Plant Box",
                    yrot = -lp.Character.LeftFoot.Position.Y,
                    vec = lp.Character.LeftFoot.Position
                }

                Packets.PlaceStructure.send(plantBox)
            else
                placePlantBoxToggle:SetValue(false)
                Fluent:Notify({
                    Title = "Insufficient!",
                    Content = "You don't have the required materials to craft plant boxes.",
                    Duration = 10
                })
            end
        end
        task.wait()
    end
end

local function getPlantBoxes()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i,v in pairs(workspace.Deployables:GetChildren()) do
            if v.Name == "Plant Box" and not v:FindFirstChild("Seed") then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance <= 500 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
        return target
    end
end

function plantSeeds()
    local activeTweens = {}
    while getgenv().autoPlant do
        if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
            local target = getPlantBoxes()

            if target then
                local plantBoxId = target:GetAttribute("EntityID")
                local seedId = ItemIDS[selectedSeed]

                local plantData = {
                    entityID = plantBoxId,
                    itemID = seedId
                }

                Packets.InteractStructure.send(plantData)

                local groundLevel = lp.Character.PrimaryPart.Position.Y
                local offset = Vector3.new(0,groundLevel - target.PrimaryPart.Position.Y,0)
                local targetPosition = target.PrimaryPart.Position + offset
                local tweenInfo = TweenInfo.new(
                    (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                    Enum.EasingStyle.Linear
                )

                for _, part in pairs(lp.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if activeTweens[part] then
                            activeTweens[part]:Cancel()
                        end

                        local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                        partTween:Play()
                        activeTweens[part] = partTween
                    end
                end
            end
        end
        task.wait(0.1)
        if not getgenv().autoPlant then
            for _, tween in pairs(activeTweens) do
                tween:Cancel()
            end
            activeTweens = {}
        end
    end
    for _, tween in pairs(activeTweens) do
        tween:Cancel()
    end
    activeTweens = {}
end

local function getClosestCrop()
    local closest = 1/0
    local target = nil
    if lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        for i, v in pairs(workspace:GetChildren()) do
            if v.Name:find(selectedSeed) then
                local distance = (lp.Character.PrimaryPart.Position - v.PrimaryPart.Position).Magnitude
                if distance <= 500 and distance < closest then
                    closest = distance
                    target = v
                end
            end
        end
    end
    return target
end

function harvestCrops()
    local activeTweens = {}
    while getgenv().autoHarvest do
        local crop = getClosestCrop()

        if crop then
            Packets.Pickup.send(crop:GetAttribute("EntityID"))

            local groundLevel = lp.Character.PrimaryPart.Position.Y
            local offset = Vector3.new(0, groundLevel - crop.PrimaryPart.Position.Y, 0)
            local targetPosition = crop.PrimaryPart.Position + offset
            local tweenInfo = TweenInfo.new(
                (lp.Character.PrimaryPart.Position - targetPosition).Magnitude / speed,
                Enum.EasingStyle.Linear
            )

            for _, part in pairs(lp.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    if activeTweens[part] then
                        activeTweens[part]:Cancel()
                    end

                    local partTween = TweenService:Create(part, tweenInfo, { CFrame = CFrame.new(targetPosition) })
                    partTween:Play()
                    activeTweens[part] = partTween
                end
            end
        end

        task.wait(0.1)

        if not getgenv().autoHarvest then
            for _, tween in pairs(activeTweens) do
                tween:Cancel()
            end
            activeTweens = {}
        end
    end

    for _, tween in pairs(activeTweens) do
        tween:Cancel()
    end
    activeTweens = {}
end

if not getgenv().InitWalkspeed then
    local function walkSpeedChange()
        if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character.Humanoid.WalkSpeed = getgenv().selectedSpeed
        end
    end
    
    task.spawn(function()
        while true do
            if lp and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
                local humanoid = lp.Character:FindFirstChildOfClass("Humanoid")
    
                for _, connection in pairs(getconnections(humanoid:GetPropertyChangedSignal("WalkSpeed"))) do
                    connection:Disconnect()
                end
    
                humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(walkSpeedChange)
            end
            task.wait(0.5)
        end
    end)
    getgenv().InitWalkspeed = true
end

SaveManager:LoadAutoloadConfig()
